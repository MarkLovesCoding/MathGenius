var __awaiter=this&&this.__awaiter||function(e,i,d,s){return new(d=d||Promise)(function(r,t){function a(e){try{n(s.next(e))}catch(e){t(e)}}function o(e){try{n(s.throw(e))}catch(e){t(e)}}function n(e){var t;e.done?r(e.value):((t=e.value)instanceof d?t:new d(function(e){e(t)})).then(a,o)}n((s=s.apply(e,i||[])).next())})};import{reformatOperator,convertNumberToLevel}from"./utils.js";const badgeImgs=Array.from(document.getElementsByClassName("badge-img"));function getUserId(){return __awaiter(this,void 0,void 0,function*(){try{return(yield(yield fetch("/user-id")).json()).userId}catch(e){throw console.error(e),e}})}function retrieveBadges(){return __awaiter(this,void 0,void 0,function*(){try{var e=(yield(yield fetch("/get-badges")).json()).badges;return console.log("bages",e),e}catch(e){return console.error(e),{}}})}function getHighestBadge(t){var r,a=[];for(r in t)for(var o in t[r]){let e=0;for(var n in t[r][o]){var i=Number(n);1==t[r][o][n]&&(e=Math.max(e,i))}a.push([r,o,String(e)])}return a}function updateBadgeAppearance(e,t){var r,t=getHighestBadge(t);console.log(t);for(r of t)if(0<Number(r[2]))for(var a of e){var o=a.getAttribute("data-badge-type"),n=a.getAttribute("data-badge-operator"),i=a.nextElementSibling;r[1]==o&&r[0]==n&&null!==n&&null!==o&&(console.log("best[1]",r[1],"best[0]",r[0],"type",o,"op",n),a.classList.add("active"),i)&&(i.textContent=convertNumberToLevel(Number(r[2])))}}function updateBadgeStatus(r,a,o,n){return __awaiter(this,void 0,void 0,function*(){var e=reformatOperator(o);try{var t=yield retrieveBadges();console.log("badges from DB",t),n&&(console.log("type:",r),t[e][r][a]=!0,yield updateSessionAndDB(t))}catch(e){console.error(e)}})}function updateSessionAndDB(t){return __awaiter(this,void 0,void 0,function*(){try{var e=yield getUserId();e?(yield fetch("/update-badges",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,updatedBadges:t})})).ok?(console.log("Badges updated successfully!"),console.log(t)):console.error("Error updating badges!"):console.error("Failed to retrieve user ID")}catch(e){console.error("There was a problem with the fetch operation:",e)}})}function initializeBadgeAppearance(){return __awaiter(this,void 0,void 0,function*(){var e=yield retrieveBadges();updateBadgeAppearance(badgeImgs,e)})}window.addEventListener("DOMContentLoaded",initializeBadgeAppearance);export{retrieveBadges,getHighestBadge,updateBadgeAppearance,updateBadgeStatus};