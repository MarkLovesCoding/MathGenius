import{reformatOperator,createDifficultyText}from"./utils.js";const badgeImgs=Array.from(document.getElementsByClassName("badge-img"));async function getUserId(){try{return(await(await fetch("/user-id")).json()).userId}catch(e){throw console.error(e),e}}async function retrieveBadges(){try{return(await(await fetch("/get-badges")).json()).badges}catch(e){return console.error(e),{}}}function getHighestBadge(t){var a,r=[];for(a in t)for(var o in t[a]){let e=0;for(var n in t[a][o]){var i=Number(n);1==t[a][o][n]&&(e=Math.max(e,i))}r.push([a,o,e.toString()])}return r}function updateBadgeAppearance(e,t){var a,t=getHighestBadge(t);console.log(t);for(a of t)if(0<Number(a[2]))for(var r of e){var o=r.getAttribute("data-badge-type"),n=r.getAttribute("data-badge-operator"),i=r.nextElementSibling;a[1]==o&&a[0]==n&&null!==n&&null!==o&&(r.classList.add("active"),i)&&(i.textContent=createDifficultyText(a[2])[0])}}async function updateBadgeStatus(e,t,a,r){a=reformatOperator(a);try{var o=await retrieveBadges();r&&(o[a][e][t]=!0,await updateSessionAndDB(o))}catch(e){console.error(e)}}async function updateSessionAndDB(e){try{var t=await getUserId();t?(await fetch("/update-badges",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:t,updatedBadges:e})})).ok?(console.log("Badges updated successfully!"),console.log(e)):console.error("Error updating badges!"):console.error("Failed to retrieve user ID")}catch(e){console.error("There was a problem with the fetch operation:",e)}}async function initializeBadgeAppearance(){var e=await retrieveBadges();updateBadgeAppearance(badgeImgs,e)}window.addEventListener("DOMContentLoaded",initializeBadgeAppearance);export{retrieveBadges,getHighestBadge,updateBadgeAppearance,updateBadgeStatus};