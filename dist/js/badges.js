const badgeImgs=document.getElementsByClassName("badge-img");async function getUserId(){try{return(await(await fetch("/user-id")).json()).userId}catch(e){throw console.error(e),e}}async function retrieveBadges(){try{return(await(await fetch("/get-badges")).json()).badges}catch(e){console.error(e)}}function getHighestBadge(a){var t,r=[];for(t in a)for(var o in a[t]){let e=0;for(var n in a[t][o])1==a[t][o][n]&&(e=Math.max(e,n));r.push([t,o,e])}return r}function convertNumberToLevel(e){let a;switch(e){case 1:a="Easy";break;case 2:a="Novice";break;case 3:a="Intermediate";break;case 4:a="Advanced";break;case 5:a="Genius!";break;default:a="-"}return a}function updateBadgeAppearance(e,a){var t;for(t of getHighestBadge(a))if(0!==t[2])for(var r of e){var o=r.getAttribute("data-badge-type"),n=r.getAttribute("data-badge-operator"),i=r.nextElementSibling;t[1]==o&&t[0]==n&&(r.classList.add("active"),i.textContent=convertNumberToLevel(Number(t[2])))}}function reformatOperator(e){let a;switch(String(e).trim()){case"+":a="addition";break;case"-":a="subtraction";break;case"x":a="multiplication";break;default:a="division"}return console.log("ReformattedOp",a),a}async function updateBadgeStatus(e,a,t,r){console.log(t);t=reformatOperator(t);try{var o=await retrieveBadges();r&&(o[t][e][a]=!0,await updateSessionAndDB(o))}catch(e){console.error(e)}}async function updateSessionAndDB(e){try{var a=await getUserId();a?(await fetch("/update-badges",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:a,updatedBadges:e})})).ok?(console.log("Badges updated successfully!"),console.log(e)):console.error("Error updating badges!"):console.error("Failed to retrieve user ID")}catch(e){console.error("There was a problem with the fetch operation:",e)}}async function initializeBadgeAppearance(){var e=await retrieveBadges();updateBadgeAppearance(badgeImgs,e)}window.addEventListener("DOMContentLoaded",initializeBadgeAppearance);export{updateBadgeStatus};