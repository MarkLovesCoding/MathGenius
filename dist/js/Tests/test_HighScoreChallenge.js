import*as utilMethods from"../utils.js";import{state}from"../state.js";import*as questionLogic from"../sharedQuestionLogic.js";import{updateBadgeStatus,retrieveBadges,getHighestBadge}from"../badges.js";import{animateBadge}from"../badgeEarned.js";import{gameCorrectness,gameElements,gameActual,gameActualContainer,gameAnswerInput,gameAnswerSubmit,gameCurrScore,gameHighScore,gameLevelNumber,gameTracker,gameTrackerContainer}from"../domElements.js";const{numOne:gameNumOne,numTwo:gameNumTwo,opOne:gameOpOne}=gameElements;async function gameAnswerCheck(e){var t=sessionStorage.getItem("activeDifficulty"),a=sessionStorage.getItem("activeOperators");if(utilMethods.updateDifficultyRange(),e){if(utilMethods.correctnessView(!0,gameCorrectness),utilMethods.emphasize(gameCorrectness),utilMethods.visibilityTimedToggle(!1,gameActualContainer,1e3),updateScore(),utilMethods.disableInput(gameAnswerInput),await updateLevel(),await utilMethods.delay(300),utilMethods.resetAnswerInput([gameAnswerInput]),utilMethods.enableInput(gameAnswerInput),!a)throw new Error("Error retrieving session storage Data");questionLogic.newQuestion("game",a)}else{if(utilMethods.correctnessView(!1,gameCorrectness),utilMethods.incorrectMotion(gameCorrectness),utilMethods.disableInput(gameAnswerInput),await utilMethods.delay(200),utilMethods.visibilityTimedToggle(!0,gameActualContainer,4e3),utilMethods.resetAnswerInput([gameAnswerInput]),!a||!t)throw new Error("Error retrieving session storage Data");utilMethods.resetNumber(gameCurrScore,Number(t)),utilMethods.resetWidth([gameTracker]),questionLogic.newQuestion("game",a),await utilMethods.delay(500),utilMethods.enableInput(gameAnswerInput)}}function updateScore(){var e=parseInt(gameCurrScore?.innerHTML);gameCurrScore.innerHTML=(e+=1)?.toString(),checkHighScore()}function checkHighScore(){var e=Number(gameCurrScore?.innerHTML),t=parseInt(state.high_score.toString());50==e&&gameOverWin(),t<e?(state.high_score=e,gameHighScore.innerHTML=e.toString()):gameHighScore.innerHTML=state.high_score.toString()}function levelUp(e){gameTracker.style.backgroundColor=`hsl( ${30*e}, 100%, 50%)`}async function checkBadgeStatus(e,t,a){return!1===e[t].game[a]}async function updateLevel(){var e,t,a,r=parseInt(gameLevelNumber.textContent),s=parseInt(gameCurrScore.textContent);s%1==0&&updateProgress(s),s%10==0&&(s=Number(sessionStorage.getItem("activeDifficulty")),e=sessionStorage.getItem("activeOperators"),t=await retrieveBadges(),await utilMethods.updateLevelVisuals(a=5==s?5:s+1),e&&s&&(utilMethods.updateGeneralSelected(e,a.toString()),sessionStorage.setItem("activeDifficulty",a.toString()),utilMethods.updateDifficultyRange(),await checkBadgeStatus(t,utilMethods.reformatOperator(e),s.toString()))&&(animateBadge(),await utilMethods.delay(200),a=document.getElementsByClassName("badge-img"),await updateBadgeStatus("game",s.toString(),e,!0),updateChallengeBadgeAppearance(a,await retrieveBadges(),e)),await utilMethods.delay(300),utilMethods.disableInput(gameAnswerInput),utilMethods.resetWidth([gameTracker]),levelUp(r+1)),gameLevelNumber.textContent=r.toString()}async function updateProgress(e){e=10<e?e%10:e;var t=window.getComputedStyle(gameTrackerContainer).width,a=window.getComputedStyle(gameTrackerContainer).getPropertyValue("border-width"),r=parseFloat(t.slice(0,-2)),a=(r-=2*parseFloat(a.slice(0,-2)),window.getComputedStyle(gameTracker).width),s=parseFloat(a.slice(0,-2)),s=r/10*e;gameTracker.style.width=s.toString()+"px",t<=a&&(await utilMethods.delay(1e3),utilMethods.resetWidth([gameTracker]))}function gameUpdateAnswerHandler(e){e=e.target.value;state.userValue=Number(e)}function gameCheckAnswerHandler(e){var t=utilMethods.calculation(parseInt(gameNumOne.innerHTML),parseInt(gameNumTwo.innerHTML),gameOpOne.innerHTML);gameActual.innerHTML=t.toString(),gameAnswerCheck(t==state.userValue),e.preventDefault()}function gameOverWin(){alert("You just beat the Challenge and got 50 questions correct! Great job! You're a Math Genius! Keep going to beat your high score!")}async function resetGameSettings(){var e=sessionStorage.getItem("activeOperators");if(utilMethods.disableInput(gameAnswerInput),await utilMethods.delay(250),utilMethods.resetAnswerInput([gameAnswerInput]),utilMethods.resetNumber(gameCurrScore,1),utilMethods.resetLevelNumber(gameLevelNumber),utilMethods.resetWidth([gameTracker]),sessionStorage.setItem("activeDifficulty","1"),await utilMethods.updateLevelVisuals(1),!e)throw new Error("Error: Session Storage couldn't be retrieved");utilMethods.updateGeneralSelected(e,"1"),utilMethods.updateDifficultyRange(),questionLogic.newQuestion("game",e),await utilMethods.delay(250),utilMethods.enableInput(gameAnswerInput)}const startOverButton=document.getElementById("hsc-start-over");function updateChallengeBadgeAppearance(e,t,a){var r,s=utilMethods.reformatOperator(a),a=getHighestBadge(t);console.log("bestBadges",a);for(r of a)if("0"!==r[2]&&r[0]==s&&"game"==r[1]){var i,n=r[2];for(i of e){var o=i.getAttribute("data-badge-number");o&&o<=n&&i.classList.add("active")}}}startOverButton.addEventListener("click",resetGameSettings),gameAnswerInput.addEventListener("input",gameUpdateAnswerHandler),gameAnswerSubmit.addEventListener("submit",gameCheckAnswerHandler),window.onload=async function(){var e=sessionStorage.getItem("activeOperators"),t=sessionStorage.getItem("activeDifficulty");let a=1;t&&["1","2","3","4","5"].includes(t)&&(a=Number(t));var t=document.getElementsByClassName("badge-img"),r=await retrieveBadges();if(!e)throw new Error("ChallengeBadges not Update. SessionStorage Data error");updateChallengeBadgeAppearance(t,r,e),utilMethods.resetNumber(gameCurrScore,a),resetGameSettings()};