import*as utilMethods from"../utils.js";import{state}from"../state.js";import*as questionLogic from"../sharedQuestionLogic.js";import{updateBadgeStatus,retrieveBadges,getHighestBadge}from"../badges.js";import{animateBadge}from"../badgeEarned.js";const gameNumOne=document.getElementById("game-first-number"),gameNumTwo=document.getElementById("game-second-number"),gameOpOne=document.getElementById("game-first-operator"),gameAnswerInput=document.getElementById("game-answer-input"),gameAnswerSubmit=document.getElementById("game-answer-form"),gameCorrectness=document.getElementById("game-correctness"),gameActual=document.getElementById("game-actual"),gameActualContainer=document.getElementById("game-actual-container"),gameCurrScore=document.getElementById("game-current-score"),gameHighScore=document.getElementById("game-current-high"),gameLevelNumber=document.getElementById("game-level-number"),gameTracker=document.getElementById("game-tracker"),gameTrackerContainer=document.getElementById("game-tracker-container");async function gameAnswerCheck(e){var t=sessionStorage.getItem("activeDifficulty"),a=sessionStorage.getItem("activeOperators");if(utilMethods.updateDifficultyRange(),e){if(utilMethods.correctnessView(!0,gameCorrectness),utilMethods.emphasize(gameCorrectness),utilMethods.visibilityTimedToggle(!1,gameActualContainer,1e3),updateScore(),utilMethods.disableInput(gameAnswerInput),await updateLevel(),await utilMethods.delay(300),utilMethods.resetAnswerInput([gameAnswerInput]),utilMethods.enableInput(gameAnswerInput),!a)throw new Error("Error retrieving session storage Data");questionLogic.newQuestion("game",a)}else{if(utilMethods.correctnessView(!1,gameCorrectness),utilMethods.incorrectMotion(gameCorrectness),utilMethods.disableInput(gameAnswerInput),await utilMethods.delay(200),utilMethods.visibilityTimedToggle(!0,gameActualContainer,4e3),utilMethods.resetAnswerInput([gameAnswerInput]),!a||!t)throw new Error("Error retrieving session storage Data");utilMethods.resetNumber(gameCurrScore,Number(t)),utilMethods.resetWidth([gameTracker]),questionLogic.newQuestion("game",a),await utilMethods.delay(500),utilMethods.enableInput(gameAnswerInput)}}function updateScore(){var e=parseInt(gameCurrScore?.innerHTML);e+=1,gameCurrScore.innerHTML=e?.toString(),checkHighScore()}function checkHighScore(){var e=Number(gameCurrScore?.innerHTML),t=parseInt(state.high_score.toString());50==e&&gameOverWin(),t<e?(state.high_score=e,gameHighScore.innerHTML=e.toString()):gameHighScore.innerHTML=state.high_score.toString()}function levelUp(e){e=`hsl( ${30*e}, 100%, 50%)`;gameTracker.style.backgroundColor=e}async function checkBadgeStatus(e,t,a){return!1===e[t].game[a]}async function updateLevel(){var e=parseInt(gameLevelNumber.textContent),t=parseInt(gameCurrScore.textContent);if(t%1==0&&updateProgress(t),t%10==0){var t=Number(sessionStorage.getItem("activeDifficulty")),a=sessionStorage.getItem("activeOperators"),r=await retrieveBadges(),n=5==t?5:t+1;if(5<n||n<1)throw new Error("Next Difficulty out of range");await utilMethods.updateLevelVisuals(n.toString()),a&&t&&(utilMethods.updateGeneralSelected(a,n.toString()),sessionStorage.setItem("activeDifficulty",n.toString()),utilMethods.updateDifficultyRange(),await checkBadgeStatus(r,utilMethods.reformatOperator(a),t.toString()))&&(animateBadge(),await utilMethods.delay(200),n=document.getElementsByClassName("badge-img"),await updateBadgeStatus("game",t.toString(),a,!0),updateChallengeBadgeAppearance(n,await retrieveBadges(),a)),await utilMethods.delay(300),utilMethods.disableInput(gameAnswerInput),utilMethods.resetWidth([gameTracker]),levelUp(e+1)}gameLevelNumber.textContent=e.toString()}async function updateProgress(e){e=10<e?e%10:e;var t=window.getComputedStyle(gameTrackerContainer).width,a=window.getComputedStyle(gameTrackerContainer).getPropertyValue("border-width"),r=parseFloat(t.slice(0,-2)),a=(r-=2*parseFloat(a.slice(0,-2)),window.getComputedStyle(gameTracker).width),n=parseFloat(a.slice(0,-2)),n=r/10*e;gameTracker.style.width=n.toString()+"px",t<=a&&(await utilMethods.delay(1e3),utilMethods.resetWidth([gameTracker]))}function gameUpdateAnswerHandler(e){e=e.target.value;state.userValue=Number(e)}function gameCheckAnswerHandler(e){var t=utilMethods.calculation(parseInt(gameNumOne.innerHTML),parseInt(gameNumTwo.innerHTML),gameOpOne.innerHTML);gameActual.innerHTML=t.toString(),gameAnswerCheck(t==state.userValue),e.preventDefault()}function gameOverWin(){alert("You just beat the Challenge and got 50 questions correct! Great job! You're a Math Genius! Keep going to beat your high score!")}async function resetGameSettings(){var e=sessionStorage.getItem("activeOperators");if(utilMethods.disableInput(gameAnswerInput),await utilMethods.delay(250),utilMethods.resetAnswerInput([gameAnswerInput]),utilMethods.resetNumber(gameCurrScore,1),utilMethods.resetLevelNumber(gameLevelNumber),utilMethods.resetWidth([gameTracker]),sessionStorage.setItem("activeDifficulty","1"),await utilMethods.updateLevelVisuals("1"),!e)throw new Error("Error: Session Storage couldn't be retrieved");utilMethods.updateGeneralSelected(e,"1"),utilMethods.updateDifficultyRange(),questionLogic.newQuestion("game",e),await utilMethods.delay(250),utilMethods.enableInput(gameAnswerInput)}const startOverButton=document.getElementById("hsc-start-over");function updateChallengeBadgeAppearance(e,t,a){var r,n=utilMethods.reformatOperator(a),a=getHighestBadge(t);console.log("bestBadges",a);for(r of a)if("0"!==r[2]&&r[0]==n&&"game"==r[1]){var s,i=r[2];for(s of e){var o=s.getAttribute("data-badge-number");o&&o<=i&&s.classList.add("active")}}}startOverButton.addEventListener("click",resetGameSettings),gameAnswerInput.addEventListener("input",gameUpdateAnswerHandler),gameAnswerSubmit.addEventListener("submit",gameCheckAnswerHandler),window.onload=async function(){var e=sessionStorage.getItem("activeOperators"),t=sessionStorage.getItem("activeDifficulty");let a=1;t&&["1","2","3","4","5"].includes(t)&&(a=Number(t));var t=document.getElementsByClassName("badge-img"),r=await retrieveBadges();if(!e)throw new Error("ChallengeBadges not Update. SessionStorage Data error");updateChallengeBadgeAppearance(t,r,e),utilMethods.resetNumber(gameCurrScore,a),resetGameSettings()};