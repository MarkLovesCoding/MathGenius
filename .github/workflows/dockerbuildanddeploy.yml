name: Docker Build and Deploy

on:
  push:
    branches:
      - DockerFile

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: docker build -t markhaluser/mathgenius .
        # Replace `your-docker-username` and `your-image-name` with your Docker Hub username and image name.

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove Old Images from Docker Hub
        run: |
          for tag in $(docker image ls -q ${{ secrets.DOCKER_USERNAME }}/mathgenius); do
            docker image rm -f $tag
          done
        # Remove all versions of the image if they exist, ignore errors if none exist

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/MathGenius

      - name: SSH into DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_IP }}
          username: ${{ secrets.DIGITALOCEAN_USER_ROOT }}
          password: ${{ secrets.DIGITALOCEAN_PASSWORD_ROOT }}
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status
            docker pull ${{ secrets.DOCKER_USERNAME }}/mathgenius
            docker-compose -f docker-compose.yml up -d
            sshpass -p ${{ secrets.DIGITALOCEAN_PASSWORD_ROOT }} ssh ${{ secrets.DIGITALOCEAN_USER_ROOT }}@${{ secrets.DIGITALOCEAN_IP }} 'pm2 restart MathGenius && pm2 save'
        # Replace `/path/to/your/docker-compose.yml` with the actual path to your docker-compose.yml file.

#   # Add more jobs or steps as needed
#   GitHub Actions Workflow: The workflow builds your Docker image, pushes it to Docker Hub, and then deploys it to your DigitalOcean droplet using Docker Compose.

#   DigitalOcean Droplet Setup: Once the Docker container is deployed on the DigitalOcean droplet, it should be running your application on port 4000 inside the container.

#   Nginx Configuration: If your nginx server is configured to proxy requests from port 4000 to your application, it will forward incoming requests to your Docker container running on port 4000.

#   Request Flow: When a user sends a request to your DigitalOcean droplet on port 4000, nginx will receive the request and proxy it to your application running inside the Docker container on the same port.
